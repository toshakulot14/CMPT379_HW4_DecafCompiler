; ModuleID = 'Test'

@x = global [10 x i1] zeroinitializer

define i32 @main() {
entry:
  %y = alloca i1
  %arrayval = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 0)
  store i1 %arrayval, i1* %y
  %arrayval1 = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 1)
  store i1 %arrayval1, i1* %y
  %arrayval2 = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 2)
  store i1 %arrayval2, i1* %y
  %arrayval3 = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 3)
  store i1 %arrayval3, i1* %y
  %arrayval4 = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 4)
  store i1 %arrayval4, i1* %y
  %arrayval5 = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 5)
  store i1 %arrayval5, i1* %y
  %arrayval6 = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 6)
  store i1 %arrayval6, i1* %y
  %arrayval7 = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 7)
  store i1 %arrayval7, i1* %y
  %arrayval8 = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 8)
  store i1 %arrayval8, i1* %y
  %arrayval9 = load i1* getelementptr inbounds ([10 x i1]* @x, i32 0, i32 9)
  store i1 %arrayval9, i1* %y
  ret i32 0
}
