; ModuleID = 'Test'

@globalstring = private unnamed_addr constant [2 x i8] c"a\00"
@globalstring1 = private unnamed_addr constant [2 x i8] c"b\00"
@globalstring2 = private unnamed_addr constant [2 x i8] c"c\00"
@globalstring3 = private unnamed_addr constant [2 x i8] c"d\00"
@globalstring4 = private unnamed_addr constant [2 x i8] c"e\00"

declare void @print_string(i8*)

define i32 @main() {
entry:
  %x = alloca i32
  store i32 0, i32* %x
  call void @print_string(i8* getelementptr inbounds ([2 x i8]* @globalstring, i32 0, i32 0))
  br label %ifstart

ifstart:                                          ; preds = %entry
  br i1 true, label %iftrue, label %end

iftrue:                                           ; preds = %ifstart
  call void @print_string(i8* getelementptr inbounds ([2 x i8]* @globalstring1, i32 0, i32 0))
  br label %end

end:                                              ; preds = %iftrue, %ifstart
  br label %ifstart1

ifstart1:                                         ; preds = %end
  br i1 false, label %iftrue2, label %end3

iftrue2:                                          ; preds = %ifstart1
  call void @print_string(i8* getelementptr inbounds ([2 x i8]* @globalstring2, i32 0, i32 0))
  br label %end3

end3:                                             ; preds = %iftrue2, %ifstart1
  br label %ifstart4

ifstart4:                                         ; preds = %end3
  br i1 true, label %iftrue5, label %end6

iftrue5:                                          ; preds = %ifstart4
  call void @print_string(i8* getelementptr inbounds ([2 x i8]* @globalstring3, i32 0, i32 0))
  br label %end6

end6:                                             ; preds = %iftrue5, %ifstart4
  call void @print_string(i8* getelementptr inbounds ([2 x i8]* @globalstring4, i32 0, i32 0))
  ret i32 0
}
